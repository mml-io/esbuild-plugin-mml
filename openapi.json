{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.mserve.io"
    }
  ],
  "info": {
    "title": "M-Serve",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/identity/organizations": {
      "get": {
        "summary": "List all organizations",
        "operationId": "listOrganizations",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of organizations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "organizations",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create an organisation",
        "operationId": "createOrganization",
        "tags": [
          "organizations"
        ],
        "requestBody": {
          "description": "Organization to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}": {
      "get": {
        "summary": "Info for a specific organization",
        "operationId": "getOrganization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "organization"
                  ],
                  "properties": {
                    "organization": {
                      "$ref": "#/components/schemas/Organization"
                    },
                    "organizationMembership": {
                      "type": "object",
                      "required": [
                        "role"
                      ],
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "admin",
                            "member"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Edit an organization",
        "operationId": "updateOrganization",
        "tags": [
          "organizations"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Organization updates",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrganizationBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/projects": {
      "get": {
        "summary": "List all projects within an organization",
        "operationId": "listProjects",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find projects within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "projects",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a project",
        "operationId": "createProject",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find projects within",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/invites": {
      "get": {
        "summary": "List all invites within an organization",
        "operationId": "listInvites",
        "tags": [
          "invites"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find invites within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of invites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "organizationInvites",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "organizationInvites": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationInvite"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a invite",
        "operationId": "createInvite",
        "tags": [
          "invites"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find invites within",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Invite to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrganizationInviteBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "invite",
                    "inviteToken"
                  ],
                  "properties": {
                    "invite": {
                      "$ref": "#/components/schemas/OrganizationInvite"
                    },
                    "inviteToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/invites/{inviteId}": {
      "delete": {
        "summary": "Delete an invite",
        "operationId": "deleteInvite",
        "tags": [
          "invites"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the invite is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inviteId",
            "in": "path",
            "required": true,
            "description": "The id of the invite",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expected response to a valid request"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/invite-offers/{inviteId}": {
      "get": {
        "summary": "Get an invite offer",
        "operationId": "getInviteOffer",
        "tags": [
          "invites"
        ],
        "parameters": [
          {
            "name": "inviteId",
            "in": "path",
            "required": true,
            "description": "The id of the invite",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "The organization for the invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "in": "query",
            "description": "The token for the invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An invite offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteOffer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Accept an invite offer",
        "operationId": "acceptInviteOffer",
        "tags": [
          "invites"
        ],
        "parameters": [
          {
            "name": "inviteId",
            "in": "path",
            "required": true,
            "description": "The id of the invite",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "description": "The organization for the invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Token to accept the invite",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInviteOfferAcceptedBody"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/api-keys": {
      "get": {
        "summary": "List all API keys within an organization",
        "operationId": "listAPIKeys",
        "tags": [
          "api-keys"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find API keys within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of API keys",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "apiKeys",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "apiKeys": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/APIKey"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create an API key",
        "operationId": "createAPIKey",
        "tags": [
          "api-key"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find API keys within",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "API key to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAPIKeyBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "apiKey",
                    "apiKeyToken"
                  ],
                  "properties": {
                    "apiKey": {
                      "$ref": "#/components/schemas/APIKey"
                    },
                    "apiKeyToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/api-keys/{apiKeyId}": {
      "get": {
        "summary": "Get an API key",
        "operationId": "getAPIKey",
        "tags": [
          "api-key"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the API key is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "description": "The id of the API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Update an API Key",
        "operationId": "updateAPIKey",
        "tags": [
          "api-key"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the API key is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "description": "The id of the API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "API key to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAPIKeyBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKey"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete an API Key",
        "operationId": "deleteAPIKey",
        "tags": [
          "api-key"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the API key is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "description": "The id of the API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expected response to a valid request"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/api-keys/{apiKeyId}/permissions": {
      "get": {
        "summary": "List all permissions for an API key",
        "operationId": "listPermissionsForAPIKey",
        "tags": [
          "api-key"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of team permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "apiKeyPermissions",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "apiKeyPermissions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/APIKeyPermission"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create an API Key permission",
        "operationId": "createAPIKeyPermission",
        "tags": [
          "api-keys"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "description": "The id of the API key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Permission to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAPIKeyPermissionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyPermission"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/api-keys/{apiKeyId}/permissions/{permissionId}": {
      "delete": {
        "summary": "Delete an API Key permission",
        "operationId": "deleteAPIKeyPermission",
        "tags": [
          "api-keys"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "apiKeyId",
            "in": "path",
            "required": true,
            "description": "The id of the API key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "description": "The id of the permission",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expected response to a valid request"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/members": {
      "get": {
        "summary": "List all members within an organization",
        "operationId": "listMembers",
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find members within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "members",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Member"
                      }
                    },
                    "role": {
                      "type": "string",
                      "enum": [
                        "admin",
                        "member"
                      ]
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/members/{memberId}": {
      "get": {
        "summary": "Get a member",
        "operationId": "getMember",
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the member is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A member",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Update a member",
        "operationId": "updateMember",
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the member is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Member to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a member",
        "operationId": "deleteMember",
        "tags": [
          "members"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the member is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Expected response to a valid request"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/members/{memberId}/permissions": {
      "get": {
        "summary": "List all permissions for a member",
        "operationId": "listPermissionsForMember",
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find the member within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "memberPermissions",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "memberPermissions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MemberPermission"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a member permission",
        "operationId": "createMemberPermission",
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find the member within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Permission to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberPermissionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberPermission"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/members/{memberId}/permissions/{permissionId}": {
      "delete": {
        "summary": "Delete a member permission",
        "operationId": "deleteMemberPermission",
        "tags": [
          "permissions"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find the member within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "description": "The id of the permission",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Member permission deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/teams": {
      "get": {
        "summary": "List all teams within an organization",
        "operationId": "listTeams",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of teams",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "teams",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "teams": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a team",
        "operationId": "createTeam",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Team to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/teams/{teamId}": {
      "get": {
        "summary": "Get a team",
        "operationId": "getTeam",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the team is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A team",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Update a team",
        "operationId": "updateTeam",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the team is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Team to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a team",
        "operationId": "deleteTeam",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization the team is within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/teams/{teamId}/members": {
      "get": {
        "summary": "List all members for a team",
        "operationId": "listMembersForTeam",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of team members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "teamMembers",
                    "orgRole",
                    "teamRole",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "teamMembers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TeamMember"
                      }
                    },
                    "orgRole": {
                      "type": "string",
                      "enum": [
                        "admin",
                        "member"
                      ]
                    },
                    "teamRole": {
                      "type": "string",
                      "enum": [
                        "admin",
                        "member"
                      ]
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a team member",
        "operationId": "createTeamMember",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Member to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamMemberBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMember"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/teams/{teamId}/members/{memberId}": {
      "post": {
        "summary": "Update a team member",
        "operationId": "updateTeamMember",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Role to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamMemberBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamMember"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a team member",
        "operationId": "deleteTeamMember",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "The id of the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team member deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/teams/{teamId}/permissions": {
      "get": {
        "summary": "List all permissions for a team",
        "operationId": "listPermissionsForTeam",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of team permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "teamPermissions",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "teamPermissions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TeamPermission"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a team permission",
        "operationId": "createTeamPermission",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Permission to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamPermissionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamPermission"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/organizations/{organizationId}/teams/{teamId}/permissions/{permissionId}": {
      "delete": {
        "summary": "Delete a team permission",
        "operationId": "deleteTeamPermission",
        "tags": [
          "teams"
        ],
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "description": "The id of the organization to find teams within",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "teamId",
            "in": "path",
            "required": true,
            "description": "The id of the team",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "description": "The id of the permission",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team permission deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/projects": {
      "get": {
        "summary": "List all projects that a user has access to",
        "operationId": "listVisibleProjects",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "projects",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/projects/{projectId}": {
      "get": {
        "summary": "Info for a specific project",
        "operationId": "getProject",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Project"
                    },
                    {
                      "type": "object",
                      "required": [
                        "organization"
                      ],
                      "properties": {
                        "organization": {
                          "$ref": "#/components/schemas/Organization"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Edit a project",
        "operationId": "updateProject",
        "tags": [
          "projects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project updates",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/identity/profile": {
      "get": {
        "summary": "Get own profile",
        "operationId": "getProfile",
        "tags": [
          "profile"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-instances/": {
      "get": {
        "summary": "List all mml object instances",
        "operationId": "listMMLObjectInstances",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of MML object instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "objects",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "objects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MMLObjectInstance"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create an object instance",
        "operationId": "createObjectInstance",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object is in",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMMLObjectInstanceBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectInstance"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-instances/{instanceId}": {
      "get": {
        "summary": "Info for a specific object instance",
        "operationId": "getMMLObjectInstance",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object instance is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "description": "The id of the object instance to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectInstance"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Edit an object instance",
        "operationId": "updateMMLObjectInstance",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object instance is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "description": "The id of the object instance to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object updates",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMMLObjectInstanceBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectInstance"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete an object instance",
        "operationId": "deleteMMLObjectInstance",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "description": "The id of the object to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The object was deleted"
          },
          "default": {
            "description": "An error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-instances/{instanceId}/log-access": {
      "get": {
        "summary": "Obtain log access information for a specific object instance",
        "operationId": "getMMLObjectInstanceLogAccess",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object instance is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "description": "The id of the object instance to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectInstanceLogAccess"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-templates/": {
      "get": {
        "summary": "List all mml object templates",
        "operationId": "listMMLObjectTemplates",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the template is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of MML object templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "templates",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MMLObjectTemplate"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create an object template",
        "operationId": "createMMLObjectTemplate",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the template is in",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMMLObjectTemplateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectTemplate"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-templates/{templateId}": {
      "get": {
        "summary": "Info for a specific object template",
        "operationId": "getMMLObjectTemplate",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object template is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The id of the object template to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectTemplate"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Edit a template",
        "operationId": "updateMMLObjectTemplate",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the object template is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The id of the object template to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object updates",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMMLObjectTemplateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectTemplate"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-templates/{templateId}/versions/": {
      "get": {
        "summary": "List all mml object template versions",
        "operationId": "listMMLObjectTemplateVersions",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the template is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The id of the template to list versions for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of MML object template versions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "templateVersions",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "templateVersions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MMLObjectTemplateVersion"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create an object template version",
        "operationId": "createMMLObjectTemplateVersion",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the template is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The id of the template to create a version for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Template version to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMMLObjectTemplateVersionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectTemplateVersion"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/mml-objects/{projectId}/object-templates/{templateId}/versions/{versionId}/": {
      "get": {
        "summary": "Info for a specific template version",
        "operationId": "getMMLObjectTemplateVersion",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the template version is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The id of the template version to retrieve",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "description": "The id of the template version to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectTemplateVersion"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Edit a template version",
        "operationId": "updateMMLObjectTemplateVersion",
        "tags": [
          "objects"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the template version is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "description": "The id of the template version to edit",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "description": "The id of the template version to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Object updates",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMMLObjectTemplateVersionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MMLObjectTemplateVersion"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/worlds/{projectId}/web-world-instances/": {
      "get": {
        "summary": "List all worlds",
        "operationId": "listWorlds",
        "tags": [
          "worlds"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the world is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The offset into queried items to return",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "How many items to return at one time (max 100)",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of worlds",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "worlds",
                    "totalResults",
                    "offset",
                    "limit"
                  ],
                  "properties": {
                    "worlds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/World"
                      }
                    },
                    "totalResults": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Create a world",
        "operationId": "createWorld",
        "tags": [
          "worlds"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the world is in",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "World to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorldBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/World"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/v1/worlds/{projectId}/web-world-instances/{worldId}": {
      "get": {
        "summary": "Info for a specific world",
        "operationId": "getWorld",
        "tags": [
          "worlds"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the world is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worldId",
            "in": "path",
            "required": true,
            "description": "The id of the world to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/World"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "post": {
        "summary": "Edit a world",
        "operationId": "updateWorld",
        "tags": [
          "worlds"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the world is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worldId",
            "in": "path",
            "required": true,
            "description": "The id of the world to edit",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "World updates",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorldBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Expected response to a valid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/World"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Delete a world",
        "operationId": "deleteWorld",
        "tags": [
          "worlds"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "description": "The id of the project the world is in",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "worldId",
            "in": "path",
            "required": true,
            "description": "The id of the world to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The world was deleted"
          },
          "default": {
            "description": "An error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOrganizationBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Organization": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "CreateTeamBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateTeamBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CreateProjectBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateOrganizationBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateProjectBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "Team": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "TeamMember": {
        "type": "object",
        "required": [
          "id",
          "name",
          "userInfo",
          "role",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userInfo": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "Member": {
        "type": "object",
        "required": [
          "id",
          "name",
          "userInfo",
          "role",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userInfo": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "UpdateMemberBody": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "photoUrl": {
            "type": "string"
          }
        }
      },
      "OrganizationInvite": {
        "type": "object",
        "required": [
          "id",
          "email",
          "role",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          }
        }
      },
      "OrganizationInviteOffer": {
        "type": "object",
        "required": [
          "id",
          "email",
          "role",
          "organizationId",
          "organizationName",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          },
          "organizationId": {
            "type": "string"
          },
          "organizationName": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          }
        }
      },
      "OrganizationInviteOfferAcceptedBody": {
        "type": "object",
        "properties": {}
      },
      "CreateOrganizationInviteBody": {
        "type": "object",
        "required": [
          "email",
          "role"
        ],
        "properties": {
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          }
        }
      },
      "CreateTeamPermissionBody": {
        "type": "object",
        "required": [
          "projectId",
          "permission"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "TeamPermission": {
        "type": "object",
        "required": [
          "id",
          "projectId",
          "permission"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "CreateMemberPermissionBody": {
        "type": "object",
        "required": [
          "projectId",
          "permission"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "MemberPermission": {
        "type": "object",
        "required": [
          "id",
          "permission",
          "projectId"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "CreateTeamMemberBody": {
        "type": "object",
        "required": [
          "userId",
          "role"
        ],
        "properties": {
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          }
        }
      },
      "UpdateTeamMemberBody": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "admin",
              "member"
            ]
          }
        }
      },
      "Permission": {
        "type": "object",
        "required": [
          "resource",
          "verb"
        ],
        "properties": {
          "resource": {
            "type": "string",
            "enum": [
              "worlds",
              "mml-objects"
            ]
          },
          "verb": {
            "type": "string",
            "enum": [
              "read",
              "write",
              "admin"
            ]
          }
        }
      },
      "Profile": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "Project": {
        "type": "object",
        "required": [
          "id",
          "name",
          "organizationId",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "CreateAPIKeyBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "UpdateAPIKeyBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "APIKey": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          }
        }
      },
      "CreateAPIKeyPermissionBody": {
        "type": "object",
        "required": [
          "projectId",
          "permission"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "UserIdOrAPIKeyId": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "userId",
              "type"
            ],
            "properties": {
              "userId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "user"
                ]
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "apiKeyId",
              "type"
            ],
            "properties": {
              "apiKeyId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "apiKey"
                ]
              }
            }
          }
        ]
      },
      "APIKeyPermission": {
        "type": "object",
        "required": [
          "id",
          "permission"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/Permission"
          }
        }
      },
      "Error": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "CreateMMLObjectInstanceBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "source"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-z0-9-]{1,32}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/MMLObjectSource"
          }
        }
      },
      "UpdateMMLObjectInstanceBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": true
          },
          "source": {
            "$ref": "#/components/schemas/MMLObjectSource"
          }
        }
      },
      "MMLObjectInstance": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "enabled",
          "source",
          "url",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/MMLObjectSource"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          }
        }
      },
      "MMLObjectSource": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "templateVersionId"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "template"
                ]
              },
              "templateVersionId": {
                "$ref": "#/components/schemas/MMLObjectTemplateVersionId"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "type",
              "source"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "source"
                ]
              },
              "source": {
                "type": "string"
              },
              "parametersSchema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        ]
      },
      "MMLObjectInstanceLogAccess": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "url",
          "token"
        ],
        "properties": {
          "url": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "MMLObjectTemplate": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "defaultTemplateVersionId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          }
        }
      },
      "MMLObjectTemplateVersion": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "source",
          "createdAt",
          "createdBy"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "parametersSchema": {
            "type": "object",
            "additionalProperties": true
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          }
        }
      },
      "CreateMMLObjectTemplateVersionBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "source"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "parametersSchema": {
            "type": "object",
            "additionalProperties": true
          },
          "setAsDefault": {
            "type": "boolean"
          }
        }
      },
      "MMLObjectTemplateVersionId": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "templateId",
              "versionId"
            ],
            "properties": {
              "templateId": {
                "type": "string"
              },
              "versionId": {
                "type": "string"
              },
              "alwaysDefault": {
                "enum": [
                  false
                ]
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "templateId",
              "alwaysDefault"
            ],
            "properties": {
              "templateId": {
                "type": "string"
              },
              "alwaysDefault": {
                "enum": [
                  true
                ]
              }
            }
          }
        ]
      },
      "CreateMMLObjectTemplateBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "UpdateMMLObjectTemplateBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "defaultTemplateVersionId": {
            "type": "string"
          }
        }
      },
      "MMLObjectTemplateVersionBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "source"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "parametersSchema": {
            "type": "object",
            "additionalProperties": true
          },
          "setAsCurrent": {
            "type": "boolean"
          }
        }
      },
      "UpdateMMLObjectTemplateVersionBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "description": {
            "type": "string"
          }
        }
      },
      "CreateWorldBody": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-z0-9-]{1,32}$"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "generalConfiguration": {
            "$ref": "#/components/schemas/WorldGeneralConfiguration"
          },
          "mmlDocumentsConfiguration": {
            "$ref": "#/components/schemas/WorldMMLDocumentsConfiguration"
          },
          "authConfiguration": {
            "$ref": "#/components/schemas/WorldAuthConfiguration"
          },
          "chatConfiguration": {
            "$ref": "#/components/schemas/WorldChatConfiguration"
          },
          "environmentConfiguration": {
            "$ref": "#/components/schemas/WorldEnvironmentConfiguration"
          },
          "avatarConfiguration": {
            "$ref": "#/components/schemas/WorldAvatarConfiguration"
          },
          "enableTweakPane": {
            "type": "boolean"
          }
        }
      },
      "UpdateWorldBody": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "generalConfiguration": {
            "$ref": "#/components/schemas/WorldGeneralConfiguration"
          },
          "mmlDocumentsConfiguration": {
            "$ref": "#/components/schemas/WorldMMLDocumentsConfiguration"
          },
          "authConfiguration": {
            "$ref": "#/components/schemas/WorldAuthConfiguration"
          },
          "chatConfiguration": {
            "$ref": "#/components/schemas/WorldChatConfiguration"
          },
          "environmentConfiguration": {
            "$ref": "#/components/schemas/WorldEnvironmentConfiguration"
          },
          "avatarConfiguration": {
            "$ref": "#/components/schemas/WorldAvatarConfiguration"
          },
          "enableTweakPane": {
            "type": "boolean"
          }
        }
      },
      "World": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "authConfiguration",
          "chatConfiguration",
          "mmlDocumentsConfiguration",
          "environmentConfiguration",
          "avatarConfiguration",
          "createdAt",
          "createdBy",
          "url"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "generalConfiguration": {
            "$ref": "#/components/schemas/WorldGeneralConfiguration"
          },
          "chatConfiguration": {
            "$ref": "#/components/schemas/WorldChatConfiguration"
          },
          "authConfiguration": {
            "$ref": "#/components/schemas/WorldAuthConfiguration"
          },
          "mmlDocumentsConfiguration": {
            "$ref": "#/components/schemas/WorldMMLDocumentsConfiguration"
          },
          "environmentConfiguration": {
            "$ref": "#/components/schemas/WorldEnvironmentConfiguration"
          },
          "avatarConfiguration": {
            "$ref": "#/components/schemas/WorldAvatarConfiguration"
          },
          "createdAt": {
            "type": "string"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserIdOrAPIKeyId"
          },
          "url": {
            "type": "string"
          },
          "enableTweakPane": {
            "type": "boolean"
          }
        }
      },
      "WorldGeneralConfiguration": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "maxUserConnections": {
            "type": "number"
          }
        }
      },
      "WorldAuthConfiguration": {
        "type": "object",
        "required": [
          "allowAnonymous"
        ],
        "additionalProperties": false,
        "properties": {
          "allowAnonymous": {
            "type": "boolean"
          },
          "password": {
            "type": "string"
          },
          "authProviders": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "webhook": {
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "webhookUrl"
                ],
                "properties": {
                  "webhookUrl": {
                    "type": "string"
                  }
                }
              },
              "google": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "allowedOrganizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowedUsers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "discord": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "allowedUsers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "WorldMMLDocumentsConfiguration": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "mmlDocuments"
        ],
        "properties": {
          "mmlDocuments": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MMLDocument"
            }
          }
        }
      },
      "WorldChatConfiguration": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "MMLDocument": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          },
          "rotation": {
            "$ref": "#/components/schemas/Rotation"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          }
        }
      },
      "Position": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "x",
          "y",
          "z"
        ],
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "Rotation": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "x",
          "y",
          "z"
        ],
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "Scale": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "x",
          "y",
          "z"
        ],
        "properties": {
          "x": {
            "type": "number"
          },
          "y": {
            "type": "number"
          },
          "z": {
            "type": "number"
          }
        }
      },
      "WorldEnvironmentConfiguration": {
        "type": "object",
        "properties": {
          "groundPlane": {
            "type": "boolean"
          },
          "skybox": {
            "$ref": "#/components/schemas/Skybox"
          },
          "envMap": {
            "$ref": "#/components/schemas/EnvMap"
          },
          "sun": {
            "$ref": "#/components/schemas/Sun"
          },
          "postProcessing": {
            "$ref": "#/components/schemas/PostProcessing"
          },
          "ambientLight": {
            "$ref": "#/components/schemas/AmbientLight"
          }
        }
      },
      "Skybox": {
        "type": "object",
        "properties": {
          "intensity": {
            "type": "number"
          },
          "blurriness": {
            "type": "number"
          },
          "azimuthalAngle": {
            "type": "number"
          },
          "polarAngle": {
            "type": "number"
          }
        }
      },
      "EnvMap": {
        "type": "object",
        "properties": {
          "intensity": {
            "type": "number"
          }
        }
      },
      "Sun": {
        "type": "object",
        "properties": {
          "intensity": {
            "type": "number"
          },
          "polarAngle": {
            "type": "number"
          },
          "azimuthalAngle": {
            "type": "number"
          }
        }
      },
      "PostProcessing": {
        "type": "object",
        "properties": {
          "bloomIntensity": {
            "type": "number"
          }
        }
      },
      "AmbientLight": {
        "type": "object",
        "properties": {
          "intensity": {
            "type": "number"
          }
        }
      },
      "WorldAuthWebHookResponse": {
        "type": "object",
        "required": [
          "username",
          "characterDescription"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "characterDescription": {
            "$ref": "#/components/schemas/CharacterDescription"
          }
        }
      },
      "CharacterDescription": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "meshFileUrl"
            ],
            "properties": {
              "meshFileUrl": {
                "type": "string"
              },
              "mmlCharacterString": {
                "type": "null"
              },
              "mmlCharacterUrl": {
                "type": "null"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "mmlCharacterString"
            ],
            "properties": {
              "meshFileUrl": {
                "type": "null"
              },
              "mmlCharacterString": {
                "type": "string"
              },
              "mmlCharacterUrl": {
                "type": "null"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "mmlCharacterUrl"
            ],
            "properties": {
              "meshFileUrl": {
                "type": "null"
              },
              "mmlCharacterString": {
                "type": "null"
              },
              "mmlCharacterUrl": {
                "type": "string"
              }
            }
          }
        ]
      },
      "WorldAvatarConfiguration": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "availableAvatars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorldAvatar"
            }
          },
          "allowCustomAvatars": {
            "type": "boolean"
          },
          "customAvatarWebhookUrl": {
            "type": "string"
          }
        }
      },
      "WorldAvatar": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "meshFileUrl"
            ],
            "properties": {
              "isDefaultAvatar": {
                "type": "boolean"
              },
              "meshFileUrl": {
                "type": "string"
              },
              "mmlCharacterString": {
                "type": "null"
              },
              "mmlCharacterUrl": {
                "type": "null"
              },
              "thumbnailUrl": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "mmlCharacterString"
            ],
            "properties": {
              "isDefaultAvatar": {
                "type": "boolean"
              },
              "meshFileUrl": {
                "type": "null"
              },
              "mmlCharacterString": {
                "type": "string"
              },
              "mmlCharacterUrl": {
                "type": "null"
              },
              "thumbnailUrl": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "mmlCharacterUrl"
            ],
            "properties": {
              "isDefaultAvatar": {
                "type": "boolean"
              },
              "meshFileUrl": {
                "type": "null"
              },
              "mmlCharacterString": {
                "type": "null"
              },
              "mmlCharacterUrl": {
                "type": "string"
              },
              "thumbnailUrl": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "responses": {
      "Error": {
        "description": "An error occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}
